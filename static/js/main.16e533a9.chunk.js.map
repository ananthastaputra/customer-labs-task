{"version":3,"sources":["Example.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","setAppElement","Example","props","useState","modalIsOpen","setModalIsOpen","segmentName","firstName","LastName","Age","Gender","AccountName","inputList","setInputList","setIsSent","onClick","isOpen","className","style","overlay","background","for","type","id","name","placeholder","map","item","i","onchange","e","index","target","value","handleChange","selected","preventDefault","fetch","method","body","JSON","stringify","then","alert","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PASAA,IAAMC,cAAc,SAkGJC,MAhGhB,SAAkBC,GAEhB,MAAmCC,oBAAS,GAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAS,CACvC,CAACG,YAAY,GAAGC,UAAU,GAAGC,SAAS,GAAGC,IAAI,GAAGC,OAAO,GAAGC,YAAY,MADxE,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,EAAiCV,mBAAS,IAA1C,mBACA,GADA,UAC4BA,oBAAS,IAArC,mBAAeW,GAAf,WAkBA,OACA,gCACE,wBAAQC,QAAS,WAAKV,GAAe,IAArC,0BACA,cAAC,IAAD,CAAOW,OAAQZ,EAAaa,UAAU,cACtCC,MAAO,CAAEC,QAAS,CAAEC,WAAY,YADhC,SAIE,sBAAKH,UAAU,gBAAf,UACE,oBAAIA,UAAU,OAAd,0BAIA,sBAAKA,UAAU,YAAf,UACE,uBAAOI,IAAI,eAAX,uCACA,uBAAOC,KAAK,OAAOC,GAAG,UAAUC,KAAK,cAAcC,YAAY,oBAC/D,iGACCb,EAAUc,KAAI,SAACC,EAAKC,GACnB,OACA,8BACE,yBAAQX,UAAU,gBAAgBM,GAAG,qBAAqBM,SAAU,SAAAC,GAAC,OAnC9D,SAACA,EAAEC,GACpBlB,EAAa,eAAEiB,EAAEE,OAAOR,KAAMM,EAAEE,OAAOC,QAkC0CC,CAAaJ,IAApF,UACE,wBAAQK,UAAQ,EAACX,KAAK,aAAYS,MAAON,EAAKpB,UAA9C,wBACA,wBAAQiB,KAAK,YAAWS,MAAON,EAAKnB,SAApC,uBACA,wBAAQgB,KAAK,MAAKS,MAAON,EAAKlB,IAA9B,iBACA,wBAAQe,KAAK,SAAQS,MAAON,EAAKjB,OAAjC,oBACA,wBAAQc,KAAK,eAAcS,MAAON,EAAKhB,YAAvC,8BANMiB,MAoBZ,8BACE,uBAAON,KAAK,SAASW,MAAM,mBAAmBlB,QAnDnC,WACnBF,EAAa,GAAD,mBAAKD,GAAL,CAAe,CAACN,YAAY,GAAGC,UAAU,GAAGC,SAAS,GAAGC,IAAI,GAAGC,OAAO,GAAGC,YAAY,QAkDlBM,UAAU,yBAUrF,sBAAKA,UAAU,SAAf,UACE,wBAAQA,UAAU,uBAAuBF,QAAS,WAAKV,GAAe,IAAtE,oBACA,wBAAQY,UAAU,yBAAyBF,QA5DpC,SAAAe,GACbA,EAAEM,iBACFC,MAAM,4DAA6D,CACjEC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACnC,YAAY,GAAGC,UAAU,GAAGC,SAAS,GAAGC,IAAI,GAAGC,OAAO,GAAGC,YAAY,OAC1F+B,MAAK,kBAAM5B,GAAU,MACxB6B,MAAM,aAsDA,sCCvEKC,MAVf,WAGE,OACE,8BACE,cAAC,EAAD,OCFSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.16e533a9.chunk.js","sourcesContent":["import React,{useState} from \"react\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Modal from \"react-modal\"\r\nimport \"./Example.css\"\r\nimport {FontAwesome} from \"react-icons/fa\"\r\nimport 'font-awesome/css/font-awesome.min.css'\r\n\r\n\r\n\r\nModal.setAppElement(\"#root\")\r\n\r\nfunction Example (props) {\r\n  \r\n  const [modalIsOpen,setModalIsOpen]=useState(false)\r\n  const [inputList,setInputList] =useState([\r\n    {segmentName:\"\",firstName:\"\",LastName:\"\",Age:\"\",Gender:\"\",AccountName:\"\"}\r\n   \r\n\r\n\r\n  ])\r\n  const [cuurValue,setCurrValue] = useState(\"\")\r\n  const [isSent, setIsSent] = useState(false)\r\n\r\n  const handleChange=(e,index)=>{\r\n    setInputList({[e.target.name]:e.target.value})\r\n  }\r\n\r\n  const handleAddInput=()=>{\r\n    setInputList([...inputList,{segmentName:\"\",firstName:\"\",LastName:\"\",Age:\"\",Gender:\"\",AccountName:\"\"}])\r\n  }\r\n  const submit = e => {\r\n    e.preventDefault()\r\n    fetch(`https://webhook.site/201161c7-ca31-4e36-a60f-95c30c8130f5`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({segmentName:\"\",firstName:\"\",LastName:\"\",Age:\"\",Gender:\"\",AccountName:\"\"}),\r\n    }).then(() => setIsSent(true))\r\n    alert(\"thankyou\")\r\n  }\r\n\r\n  return (\r\n  <div>\r\n    <button onClick={()=>{setModalIsOpen(true)}}>Save Segment</button>\r\n    <Modal isOpen={modalIsOpen} className=\"Modal-right\"\r\n    style={{ overlay: { background: '#686868' } }}\r\n    \r\n    >\r\n      <div className=\"Modal-content\">\r\n        <h2 className=\"Save\">Save Segment</h2>\r\n\r\n        \r\n\r\n        <div className=\"container\">\r\n          <label for=\"Name segment\">Enter the Name of Segment</label>\r\n          <input type=\"text\" id=\"segment\" name=\"SegmentName\" placeholder=\"Name of Segment\"  />\r\n          <p>To save your segment,you need to add the schemas to build query </p>\r\n          {inputList.map((item,i)=>{\r\n            return (\r\n            <div key={i}>\r\n              <select className=\"custom-select\" id=\"inputGroupSelect01\" onchange={e=>handleChange(e,i)} >\r\n                <option selected name=\"first_name\"value={item.firstName}>First Name</option>\r\n                <option name=\"last_name\"value={item.LastName}>Last Name</option>\r\n                <option name=\"Age\"value={item.Age}>Age</option>\r\n                <option name=\"gender\"value={item.Gender}>Gender</option>\r\n                <option name=\"account_name\"value={item.AccountName}>Account Name</option>\r\n    \r\n              </select>\r\n              \r\n\r\n             \r\n            </div>\r\n\r\n    \r\n\r\n            )\r\n\r\n\r\n          })}\r\n          <div>\r\n            <input type=\"button\" value=\"+ Add New Schema\" onClick={handleAddInput} className=\"btn btn-primary\" />\r\n            \r\n          </div>\r\n       \r\n\r\n        </div>\r\n\r\n\r\n        \r\n        \r\n        <div className=\"footer\">\r\n          <button className=\"btn btn-light button\" onClick={()=>{setModalIsOpen(false)}}>Cancel</button>\r\n          <button className=\"btn btn-success button\" onClick={submit}>Save Segment</button>\r\n        </div>\r\n\r\n\r\n       \r\n      </div>\r\n\r\n    </Modal>\r\n  </div>\r\n\r\n    \r\n    \r\n  );\r\n}\r\n\r\n \r\n \r\n export default Example","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Example from \"./Example\"\n\n\n\n\n\nfunction App() {\n  \n\n  return (\n    <div>\n      <Example />\n     \n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}